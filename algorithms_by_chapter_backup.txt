S&W Algorithms by Chapter
1 Fundamentals
1.1 Basic Programming Model
1.2 Data Abstraction
1.3 Bags, Queues, and Stacks
APIs
Bag
Queue
Stack
Algorithms
1.1 ResizingArrrayStack
1.2 Stack
1.3 Queue
1.4 Bag
1.4 Analysis of Algorithms
1.5 Case Study: Union-Find
APIs
UF
Algorithms
1.5 Union Find
1.5.1 Quick-find
1.5.2 Quick-union
1.5.3 Weighted quick-union
2 Sorting
2.1 Elementary Sorts
2.1 Selection
2.2 Insertion
2.3 Shell
2.2 Mergesort
2.4.1 Top-down merge
2.4.2 Bottom-up merge
2.3 Quicksort
2.5.1 Quick
2.5.2 Quick with 3 way partitioning
2.4 Priority Queues
APIs
MaxPQ
IndexMinPQ
Algorithms
2.6 Heap Priority Queue
2.7 Heapsort	
2.5 Applications
3 Searching
3.1 Symbol Tables
APIs
ST
Algorithms
3.1 SequentialSearchST
3.2 BinarySeachST
3.2 Binary Search Trees
3.3 BST
3.3 Balanced Search Trees
3.4 RedBlackBST
3.4 Hash Tables
3.5 SeparateChainingHashST
3.6 LinearProbingHashST
3.5 Applications
APIs
SET
4 Graphs
4.1 Undirected Graphs
APIs
Graph
Search
Paths
CC
SymbolGraph
Algorithms
4.1 DepthFirstPaths
4.2 BreadthFirstPaths
4.3 CC
4.2 Directed Graphs
APIs
Digraph
DirectedDFS
DirectedCycle
Topological
SCC
TransitiveClosure
Algorithms
4.4 DirectedDFS
4.5 Topological
4.6 KosarajuSCC
4.3 Minimum Spanning Trees
APIs
Edge
EdgeWeightedGraph
Algorithms
4.7 PrimMST
4.8 KruskalMST
4.4 Shortest Paths
APIs
DirectedEdge
EdgeWeightedDigraph
SP
Algorithms
4.9 DijkstraSP
4.10 AcyclicSP
4.11 BellmanFordSP
5 Strings
5.1 String Sorts
5.1 LSD
5.2 MSD
5.3 Quick3string
5.2 Tries
APIs
StringST
Algorithms
5.4 TrieST
5.5 TST
5.3 Substring Search
APIs
KMP
Algorithms
5.6 KMP
5.7 BoyerMoore
5.8 RabinKarp
5.4 Regular Expressions
5.9 NFA
5.5 Data Compression
APIs
BinaryStdIn
BinaryStdOut
Algorithms
5.10 Huffam
5.11 LZW
6 Context

Proposed Algorithms (S & W Ordering):


Chapter 1:
- Bag (Array)
- Bag (LL)
- Queue (Array)
- Queue (LL)
- Stack (Array)
- Stack (LL)
- Union Find (QuickFind)
- Union Find (QuickUnion)
- Union Find (WeightedQuickUnion)


Chapter 2:
- Insertion Sort
- Selection Sort
- Shell Sort
- Merge Sort Top Down
- Merge Sort Bottom Up
- Quick Sort
- Quick 3-way Sort
- Heap Sort
- MaxPQ
- MinPQ


Chapter 3:
- Basic Symbol Table (LL)
- Ordered Symbol Table (Ordered Array)
- Ordered Symbol Table (BST)
- Ordered Symbol Table (Red-black BST)
- Binary Search
- Separate Chaining Hash Table
- Linear Probing Hash Table


Chapter 4:
- Graph (directed/weighted)
- Graph (directed/unweighted)
- Graph (undirected/weighted)
- Graph (undirected/unweighted)
- Depth First Search (directed)
- Depth First Search (undirected)
- Breadth First Search (directed)
- Breadth First Search (undirected)
- Cycle Detection
- Preorder Vertex Ordering
- Postorder Vertex Ordering
- Reverse postorder Vertex Ordering (Topological Sort)
- Connected Components
- Kosaraju's Strongly Connected Components
- Transitive Closure
- Prim's Minimum Spanning Tree (Lazy version)
- Prim's Minimum Spanning Tree (Eager version)
- Kruskal's Minimum Spanning Tree
- Dijkstra's Shortest Paths
- Bellman-Ford Shortest Paths


Chapter 5:
- LSD String Sort
- MSD String Sort
- Three-way String Quick Sort
- Trie Symbol Table
- Ternary Search Trie
- Knuth-Morris-Pratt Substring Search
- Boyer-Moore Substring Search
- Rabin-Karp Fingerprint Substring Search
- Non-deterministic Finite-state Automata
- Huffman Compression
- LZW Compression


Proposed organization by visualization type
Grid
Array-based
Bag (Array)
Queue (Array)
Stack (Array)
Ordered Symbol Table (Ordered Array)
Linked-list-based
Bag (LL)
Queue (LL)
Stack (LL)
Basic Symbol Table (LL)
LSD String Sort
MSD String Sort


      Hybrid (array & linked list):
Separate Chaining Hash Table




      In-place sorting
Insertion Sort
Selection Sort
Shell Sort
Quick Sort
Quick 3-way Sort
      Divide and conquer
Merge Sort Top Down
Graph
Trees
MaxPQ
MinPQ
Trie Symbol Table
Ordered Symbol Table (BST)
Ordered Symbol Table (Red-black BST)
Non-tree graphs
Depth First Search (directed)
Depth First Search (undirected)
Breadth First Search (directed)
Breadth First Search (undirected)
Cycle Detection
Preorder Vertex Ordering
Postorder Vertex Ordering
Reverse postorder Vertex Ordering (Topological Sort)
Connected Components
Kosaraju's Strongly Connected Components
Kruskal's Minimum Spanning Tree
Dijkstra's Shortest Paths
Bellman-Ford Shortest Paths
Hybrid
Tree + Grid
Huffman Compression
Heap Sort
Union Find (QuickFind)
Union Find (QuickUnion)
Union Find (WeightedQuickUnion)
Binary Search
Graph and Grid
Knuth-Morris-Pratt Substring Search
Non-deterministic Finite-state Automata
All Algorithms Numbered
1.1 ResizingArrrayStack
1.2 Stack
1.3 Queue
1.4 Bag
1.5 Union Find
1.5.1 Quick-find
1.5.2 Quick-union
1.5.3 Weighted quick-union
2.1 Selection
2.2 Insertion
2.3 Shell
2.4.1 Top-down merge
2.4.2 Bottom-up merge
2.5.1 Quick
2.5.2 Quick with 3 way partitioning
2.6 Heap Priority Queue
2.7 Heapsort
3.1 SequentialSearchST
3.2 BinarySeachST
3.3 BST
3.4 RedBlackBST
3.5 SeparateChainingHashST
3.6 LinearProbingHashST
4.1 DepthFirstPaths
4.2 BreadthFirstPaths
4.3 CC
4.4 DirectedDFS
4.5 Topological
4.6 KosarajuSCC
4.7 PrimMST
4.8 KruskalMST
4.9 DijkstraSP
4.10 AcyclicSP
4.11 BellmanFordSP
5.1 LSD
5.2 MSD
5.3 Quick3string
5.4 TrieST
5.5 TST
5.6 KMP
5.7 BoyerMoore
5.8 RabinKarp
5.9 NFA
5.5 Data Compression
5.10 Huffam
5.11 LZW

